// Code generated by go-bindata.
// sources:
// gen/LICENSES
// gen/version
// DO NOT EDIT!

package core

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _genLicenses = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x5c\x53\xc1\x8e\xdb\x36\x14\xbc\xf3\x2b\x06\x7b\x4a\x00\x65\xb7\xed\xa1\x87\xde\xb8\x12\x6d\x11\x95\x49\x81\xa2\xe3\xfa\x28\x4b\xb4\xc5\x56\x26\x0d\x92\xca\x62\xff\xbe\xa0\xec\x4d\x9a\x9e\x04\xbd\xf7\x66\xe6\xcd\x3c\x50\xb6\x4c\xa0\x93\x7b\x55\x32\x34\xbc\x64\xa2\x63\x1d\x21\x17\x9b\xa6\xe5\xf4\x3c\xf8\xeb\xcb\xc5\x9b\x25\xf8\x17\xeb\x2e\xc1\xc4\xf8\xe5\x62\x9c\x09\x7d\xf2\xe1\xcb\x3f\x36\x11\x42\x76\x5c\xa3\xb1\x83\x71\xd1\x10\x52\xfa\xdb\x7b\xb0\x97\x29\xe1\xd3\xf0\x19\xbf\xfd\xf2\xeb\xef\xd8\x7a\xb6\x04\x0f\x1d\xfa\x6f\x66\xc6\xf6\x7a\xaa\x09\x69\x4d\xb8\xda\x18\xad\x77\xb0\x11\x93\x09\xe6\xf4\x8e\x4b\xe8\x5d\x32\x63\x81\x73\x30\x06\xfe\x8c\x61\xea\xc3\xc5\x14\x48\x1e\xbd\x7b\xc7\xcd\x84\xe8\x1d\xfc\x29\xf5\xd6\x59\x77\x41\x8f\xc1\xdf\xde\x89\x3f\x23\x4d\x36\x22\xfa\x73\x7a\xeb\x83\x41\xef\x46\xf4\x31\xfa\xc1\xf6\xc9\x8c\x18\xfd\xb0\x5c\x8d\x4b\x7d\xca\x7a\x67\x3b\x9b\x88\x4f\x69\x32\x78\xea\x1e\x88\xa7\xcf\xab\xc8\x68\xfa\x99\x58\x87\xdc\xfb\x68\xe1\xcd\xa6\xc9\x2f\x09\xc1\xc4\x14\xec\x90\x39\x0a\x58\x37\xcc\xcb\x98\x77\xf8\x68\xcf\xf6\x6a\x1f\x0a\x19\xbe\x66\x10\x49\xf2\x58\xa2\x29\xd6\x3d\x0b\x5c\xfd\x68\xcf\xf9\x6b\x56\x5b\xb7\xe5\x34\xdb\x38\x15\x18\x6d\xa6\x3e\x2d\xc9\x14\x88\xb9\xb8\x86\x59\x64\x1f\x2f\x3e\x20\x9a\x79\x26\x83\xbf\x59\x13\xb1\x7a\xfd\xb1\xdd\x3a\x93\x57\xbf\xe5\x40\xd3\x23\xa2\x98\x2b\x6f\x93\xbf\xfe\xec\xc4\x46\x72\x5e\x82\xb3\x71\x32\x2b\x66\xf4\x88\x7e\x55\xfc\xdb\x0c\x29\x57\xf2\xf8\xd9\xcf\xb3\x7f\xcb\xd6\x06\xef\x46\x9b\x1d\xc5\x3f\x08\xd1\x93\x41\x7f\xf2\xdf\xcc\xea\xe5\x7e\x62\xe7\x93\x1d\xee\x71\xaf\x07\xb8\xfd\xb8\xea\xa3\x15\xa7\x7e\x9e\x71\x32\x8f\xc0\xcc\x08\xeb\xd0\xff\xc7\x4e\xc8\xf2\x31\xf5\x2e\xd9\x7e\xc6\xcd\x87\x55\xef\xff\x36\x9f\x09\xd1\x35\x43\x27\x37\xfa\x40\x15\x03\xef\xd0\x2a\xf9\x95\x57\xac\xc2\x13\xed\xc0\xbb\xa7\x02\x07\xae\x6b\xb9\xd7\x38\x50\xa5\xa8\xd0\x47\xc8\x0d\xa8\x38\xe2\x4f\x2e\xaa\x02\xec\xaf\x56\xb1\xae\x83\x54\x84\xef\xda\x86\xb3\xaa\x00\x17\x65\xb3\xaf\xb8\xd8\xe2\x75\xaf\x21\xa4\x46\xc3\x77\x5c\xb3\x0a\x5a\x22\x0b\x3e\xa8\x38\xeb\x32\xd9\x8e\xa9\xb2\xa6\x42\xd3\x57\xde\x70\x7d\x2c\xc8\x86\x6b\x91\x39\x37\x52\x81\xa2\xa5\x4a\xf3\x72\xdf\x50\x85\x76\xaf\x5a\xd9\x31\x50\x51\x41\x48\xc1\xc5\x46\x71\xb1\x65\x3b\x26\xf4\x33\xb8\x80\x90\x60\x5f\x99\xd0\xe8\x6a\xda\x34\x59\x8a\xd0\xbd\xae\xa5\xca\xfb\xa1\x94\xed\x51\xf1\x6d\xad\x51\xcb\xa6\x62\xaa\xc3\x6b\x7e\x99\xf4\xb5\x61\x77\x29\x71\x44\xd9\x50\xbe\x2b\x50\xd1\x1d\xdd\xb2\x15\x25\x75\xcd\x14\xc9\x63\xf7\xed\x70\xa8\x59\x2e\x65\x3d\x2a\x40\x4b\xcd\xa5\xc8\x36\x4a\x29\xb4\xa2\xa5\x2e\xa0\xa5\xd2\xdf\xa1\x07\xde\xb1\x02\x54\xf1\x2e\x07\xb2\x51\x72\x57\x90\x1c\xa7\xdc\xe4\x11\x2e\x32\x4e\xb0\x3b\x4b\x8e\x1a\x3f\x5d\x44\xaa\xf5\x7f\xdf\xb1\xef\x84\xa8\x18\x6d\xb8\xd8\x76\x19\x9c\x2d\x7e\x0c\x3f\x13\x42\xc8\xbf\x01\x00\x00\xff\xff\x30\x6e\xdd\x47\x76\x04\x00\x00")

func genLicensesBytes() ([]byte, error) {
	return bindataRead(
		_genLicenses,
		"gen/LICENSES",
	)
}

func genLicenses() (*asset, error) {
	bytes, err := genLicensesBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "gen/LICENSES", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _genVersion = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x04\xc0\x41\x0e\x84\x30\x08\x05\xd0\xfd\x5c\x65\x62\xf3\x41\x0c\xed\x71\x08\x1f\x56\xee\x6c\x3c\xbf\xef\xc5\xc0\x90\xe3\x8e\x5d\xcf\xfe\x13\x2a\xa5\x67\x8a\x61\x92\xab\x9d\x33\x97\x47\x98\x2b\xca\x92\x9d\x75\x09\x3a\x7f\x5f\x00\x00\x00\xff\xff\x3b\xdf\xa7\x6f\x37\x00\x00\x00")

func genVersionBytes() ([]byte, error) {
	return bindataRead(
		_genVersion,
		"gen/version",
	)
}

func genVersion() (*asset, error) {
	bytes, err := genVersionBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "gen/version", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"gen/LICENSES": genLicenses,
	"gen/version":  genVersion,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"gen": {nil, map[string]*bintree{
		"LICENSES": {genLicenses, map[string]*bintree{}},
		"version":  {genVersion, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
